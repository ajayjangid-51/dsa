// Dbms Syllabus:-
// 1.Basic-introduction ,basic-teminologies ,some basic-concepts related with dbms and these are needed throughout in all "dbms"-concepts or mtlb throughout in all "dbms"-baateh(mtlb diff-diff ideas in dbms,aur ya mtlb diff-diff nayi-nayi cheeze in dbms ).
// concepts/terminologies in dbms like:-
//      1.x. x (what is x , why is x , when is x , what x includes etc..etc.. questions apnko har baar puchne chahiyehh to understand the "x" very better and clearly.)
//      1.1. 2-tier , 3-tier-architecture(mtlb physical-banavat ya logical-banavat)
//      1.2. data-independance( this includes:- Schema( this includes:- 3Schema/3level-of-abstraction)
//      1.3. data-models (this includes:- various data-models to store the data jaise:- network-datamodel , heirarichical-datamodel , **relational-datamodel(mtlb tablesform-datamodel) , **ER-entityRelationship-datamodel , object_oreinted-datamodel(mongodb-database is as per this datamodel) ), mtlb data-models meh basically yeh hota hai ki apn data ko database meh kaise store krethh hai, mtlb kis manner meh , kis tarike se , kis structure meh, kis physical-topology meh store krtehh hai , and then phir unn store datas meh jo relation hai usko apn kaise denote krtehh hai voh sab apn data-model meh dekhtehh hai.
//      1.4. keys (primary-key , candidate-key , foreign-key , super-key, insert , update , delete from foregin-key-table)

// 2. ER-datamodel. (it is conceptual-datamodel or mtlb it is logical-datamodel, or mtlb it is like a blueprint of the data ki data kaise kis manner meh stored hai, ya store hoga, and then esi ER-model k basis pe apn database ko apni querry-language se access krtehh hai. ) and yaha ER naam se hi pata chl rha hai ki entities k bich meh kaise and kya relation hai, thus toh esi entity-reationships information k basis pe apn database meh data ko access krlethh hai.
//  so mtlb ER-datamodel includes:- what is entity , entities-attributes , entity-attributes-types , entities-relationship , relationship-types(jaise one-to-many , many-to-one , one-to-one , many-to-many and phir questions hotehh hai ki 2-tables hai and unke bich meh yeh relation-type hai and apnko batana hai ki primary-key kis table se hogi like this etc..etc).

// 3.Concept-of-Keys in dbms-software. (very important concept for dbms , and itincludes:- primary-key , candidate-key , super-key , foreign-key(little catchy ) , alternative-key)

// note-point:-
// 1.allthough "data" plural hi hai, but phir apn "datas" use kr rhe hai, so toh mtlb be flexible with that.
// 2.yaha "DBMS" meh actually apn "RDBMS" study krenge, mtlb relational_database-managment-system-software banayenge pe focus krenge, naki apn voh network-dbms , ya heirarchical-dbms banane meh focus krenge.
// 3. dbms meh yeh sari baateh dekhenge hai ki jaise database meh apnko data insert krna efficiently/fastly toh apn usko kaise store kre then eska solution hai ki tables banalo as per the ER-model and then insertion krdo,but phir eske saat-saat yeh-yeh dikkat aati hai ki agr 2-tables connected hai and voh voh aapas meh connected then data agr apn insert krtehh hai toh kahi voh dono meh table meh toh nhi hojayega , ya phir apna data kahi voilate ya destory ya inconsistent toh nhi hojayga etc..etc.. baateh k liyeh phir apn enke solutions dekhtehh hai and aseh-aseh krtehh hai dheere-dheere sari baateh saamne aati hai and thus yeh dbms ek pure chapter/subject meh convert hojatta hai. toh mtlb apn yaha dbms meh simply database ko create krne se leke database ko write/modify/retrieve/manage krne tk puri journey dekhenge ki ess journey meh kya-kya baateh aati hai and phir unka solution bhi dekhenge, and atlast overall apn succesffuly ek well-fully-fleaged dbms ko create kr lenge.

// 4.Normalization:- (includes:- closure-method(used to find candidate-keys in table) , functional-dependencies,tables ki 1st-normalform , 2nd-normalform , 3rd-normalform , 4th-5th-normalform , BCNF, minimisation-of-functional-dependencies )

// 5. Transaction-Contorl and Concurrency. mtlb controling trasaction of data in/from database and transaction-concurrency/parallism-control in database, mtlb it is like process-synchronization in OperatingSystems (includes:- ACID-properties(atomicity , consistency , Isolation , durabilit) , read/write-problem, write/write-problem , write/read-problem(or in technical-term lost-update problem where technical-term mtlb technique-process k basis pe namikaran ), **conflict-serializibility(mtlb whether schedule is conflict-searializable or not and for this it includes precedence-method) , recoverbility(mtlb whether schedule(or mtlb process or transaction-request) is recoverable or ir-recoverable) and Concurency meh aateh hai protocols jaise:- locks(jaise 2PL(2phaselocking)) and timestamp.)

// 6. SQL("structured-querry-language", it is programming-language used to access or mtlb used to read/write database, it includes:- Commands like:- DDL(data-defination-language or mtlb data-defining-commands like create , alter , drop-commands etc..etc..) ,DML(data-manipulation-language or mtlb data-manipulationg-commands in database like jaise:- insert , select , delete) , DCL , and then Constraints(primarykey-constraints , uniquekey-constraints, check-constraint , default-constraint, notNull-constraint) , then aggregate-functions(like:- maximum , minimum , average , sum ), then in SQL and RelationalAlgebra includes:- **Joins(mtlb joinings two-or-more tables, itincludes:- natural-join , outerjoin(left-outerjoin , rightouter-join) , innerJoin , equiJoin) and then Nested-queries(practice is needed for this topic on sql-server-database), itincludes:- in-keyword, notin-keyword , any-keyword , all-keyword , exists , not-exits etc..etc.. keywords ).

// 7.Indexing (single-level-indexing (includes:- primary, cluster , secondary-indexings) , multi-level-indexing( includes: Btree , B+tree questions like ki if we insert/delete node in tree then what is effect on trees)).

// DBMS mtlb database-management-system/systems. so toh "dbms" mtlb ek system-software(or mtlb softwares-ka-system) joki database ko manange krta ho.
// jaise ki apn MERN-developer hai,so toh MERN meh M is for Mongodb-database , toh agr apn ess DBMS-chapter ko padh lenge mtlb ess DBMS-software ka pura concept(mtlb database k liyeh software banane se phle apn core-knowledge dekhenge ki database kya hota hai, database meh kya-kya problems aati ya aa skti hai, etc..etc. and then phir code-implementations) sikhlenge toh mtlb apna database-pe-working-wala-kaam bohat strong and mast hojayega, q ki phir phir apnko sab kuch pta hoga ki Database acutally kya hota hai, database kaise kaam krta hai,database meh aur kya-kya choti-moti cheeze hoti hai..etcc..etcc allabout "dbms".
// as q ki mtlb "Full-Stack-developer" ka mtlb voh hota hai ki joki mtlb frontend, backend and database theenoo pe kaam kr sake, mtlb backend-pe ya phir frontend-pe code likhke database se database-language meh data filter krke as per requirement backend ya frontend pe fetch krna aana chahiyehh. and yeh database se "data" filter krne wala kaam apn tabhi kr sktehh hai jab apnko database ki banavat pata ho and apnko database-querry-language aati ho. so toh ess "Dbms"-chapter meh apn yehi dekhenge ki database kya hota hai, database ki banvat kaisi hoti, database meh operations for arranging or filtering dekhenge and , database-querry-language dekhenge bcoz database pe operations apn ess database-querrry-language se hi kr payenge isiliy.

// tip:-
// toh basically apn aseh bolsktehh hai and mtlb actually aseh hi hota hai ki , "dbms" is a interface-software(or mtlb API) between "database" and "users". mtlb jab user database se data read/write krna chahhta then voh "dbms" se through yeh kaam kr skta hai. toh mtlb "dbms" data-retrival(mtlb data read/write) ka kaam toh krta hi hai, uske saat "dbms" aur bhi bohat sare kaam krta hai jaise ki:-
// 1.data-read/write or mtlb data-retrival.
// 2.data-redundancy
// 3.data-integrity
// 4.data-indexing
// 5.data-security.