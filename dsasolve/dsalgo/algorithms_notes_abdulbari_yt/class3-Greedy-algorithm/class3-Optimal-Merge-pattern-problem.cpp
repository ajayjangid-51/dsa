//🔥💲🍕 Okay toh now YAHA pe apn "Optimal-Merge-Pattern"-Problem k bareh meh dekhenge.. mtlb apn phle yeh dekhenge ki yeh "Problem" kya hai, and then ess "Problem" k according apn yeh dekhenge ki yeh problem kis type ki hai, and then phir apnko pata chalega ki yeh Problem toh "Optimization-Problem" hai, thus toh mtlb phir esko solve krne k liyeh apn "Greedy"-method apply krenge or mtlb "Greedy"-approach se esko solve krenge.. 🍕💲🔥

// 💡💡Tip- as agr apn esko Problem ko solve krna dekhlenge mtlb sikh jayenge , then phir aage "Huffman-Coding" ko toh phir easily krlenge.. 💡💡

//💲🍕 Understanding this Problem:- 🍕💲
// Okay toh ess Problem ko dekhne se phle apn thoda "Merging" ko vapis se shortly re-call krenge ki, as apn jantehh hi hai ki "Merging" mtlb 2-sorted-lists ko Sorted-manner hi combine krna mtlb unki ek Sorted-list banana. and ess "Merging" ko apn implement krna bhi jantehh hai ki apnko simply phle 2-index-pointer lene hai and intially they are pointing on 0th-index of both lists repectively, and then phir apnko dono index-pointer k elements ko compare krna hai and which is smaller usko new-list meh include krna hai and phir which is index-pointer(which was pointing on smaller-element) ko by-one aage move krna hai and other-index-pointer ko move nhi krna hai. and again yehi process repeat krna hai. and phir at the end apnko remaiing any one-of-list ko bhi include kr dena hai.
//🖼️🖼️🖼️  see pic-1 :- for seeing the "Merging"-procedure. 🖼️🖼️🖼️
//🔔🔔 as toh yaha ess "Merging"-procedure meh apn ek baat notice krenge ki ess procedure ka time-taken is  == Orderof(m+n) 🔔🔔

// Now esi "Merging" ko apn thoda aage extend krenge ki kya ho when there are multiple-sorted-lists and apnko unn sab-lists ko "Merge" krna hai, toh now simply we say that ki do the "n-way-merging" or 2nd-method:- ki we can say ki apn phle 2-2-lists k pair lelenge and unko "Merge" krenge and then again 2-2-lists k pair banake phir again "Merging" krenge. so toh yeh "Method2" meh apn "lists" ko alg-alg pattern meh choose kr sktehh hai, as like jaise:-
// 1. apn initally first 2-lists lenge and unko merge krenge and after Merging apni jo Merged-list hai usko next( mtlb here it is 3rd-list) se Merge krenge and then after them Merging them , again newly-merged-list ko 4th-list se merge krenge.. and soo onn upto last last-avialble-list.
// 2. and jaise we can take pairs of first-2-lists and pair of 3rd-and-4th-List. and then enke result ko merge krna etc...etc..

// 🥇 Butt butt, Now baat yeh hai ki agr apn "2-way-Merging"-(above suggested "Method-2" ) hi follow krtehh hai then kya koi farak pdta hai in choosing the pair-of-lists and then doing merging, and agr farak pdta hai toh koi "Optimal-Pattern" hai jo apnko follow krna chahiyeh for "Merging" these given "lists" takki apne kaam ko "Minimum-time" lage mtlb apna kaam minimum time meh hojayehh.

//🖼️🖼️🖼️  see pic-2 :- for seeing Method3 🖼️🖼️🖼️ , so in this method apnko :Merging" k baad jo final-list mil rhi hai unmeh "16"-elements hai, and ess procedure ka apn pura time dekhe toh yaha apnne 3-baar "merging" ki hai, first-time meh time is 11-units , 2nd-time meh time is 13-units and 3rd-time meh time is 16-units, toh mtlb apnko ess kaam ko krne meh total-time is equal to 11+13+16= 40-units lage hai.
// AS now agr apn first-2-lists ka pair leteh hai and 3rd-and-4th lists ka pair letehh hai and merging krtehh hai toh time is "32-units",
//🔔🔔 Thus toh overall apn yeh bol sktehh hai ki haan "Choosing-pairs-pattern" se farak pdta hai.. Thus toh yeh Problem yehi hai ki apnko voh "Optimal-Choosing-Pairs's-Pattern" find krna hai, jismeh apna time "Minimum" ho. 🔔🔔,
//🖼️🖼️🖼️  see pic-3 :- for seeing the some of diff-diff "Possible-Pattern" choosen for "Merging" 🖼️🖼️🖼️

//  🥈 🥈 So toh yeh "Problem" toh "Optimization-Problem" hai and Optimization meh "minization"-problem hai, thus toh according toh "Greedy"-approach apnko sbse phle sbse-minimum-size wali lists(including newly formed-Lists also) choose krni chahiyehh for making the best-Optimal-pattern.  🥈 🥈

//💲🍕 Okay toh now aab apn ess Optimal-Merge-Pattern-Problem ka ek aur Example lenge and esko apn ek-dam simply from scrath se solve krenge..   🍕💲 //🖼️🖼️🖼️  see pic-4 :- for seeing this example-problem 🖼️🖼️🖼️, as ess Problem meh apnko 5-files de rkhi hai and unki respective sizes bhi de rkhi hai, and apnko enn files ko minimum time meh Merge krna hai, thus toh mtlb apnko voh "Optimal-Pattern" find krna hai for "Merging".
//🖼️🖼️🖼️  see pic-5,6 and 7(other method for calculating total-cost of the "pattern",  mtlb here we get by multiplying-external-nodes with thier distances-to-root-node) :- for solution of this example:- 🖼️🖼️🖼️
// Thus toh mtlb yeh Problem toh same like "Optimal-Merge-Pattern"-Problem hi hai. toh apn esko simply solve kr sktehh hai, as q ki apn ne "Optimal-Merge-Pattern" ko solve krna dekh liya hai..., Okay toh solution  is sbse phle toh arrange the files in "Increasing-Order", and selecting "5" and "10" , then selecting "15" and "20" , and then selecting "30" and "30" and atlast selecting "35" and "60", so the total "Optima-Pattern's"-Cost is 15+35+60+95 = 205-time-units.

//🌟🌟🌟  as toh overall importanly apn yeh note krenge ki yeh "optimal-Merger-Pattern" was simply but yeh wali cheez "Huffman-Coding" meh use hoti hai, thus toh now aab apn agli class meh "Huffman-Coding" k bareh meh dekhenge.. :- 🌟🌟🌟